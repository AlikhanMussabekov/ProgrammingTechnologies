# 1.
# –í—Ö: —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª, –í–æ–∑–≤—Ä: —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª, –≥–¥–µ
# –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —á–∏—Å–ª–∞ —É—Ä–µ–∑–∞–Ω—ã –¥–æ –æ–¥–Ω–æ–≥–æ
# –ø—Ä–∏–º–µ—Ä [0, 2, 2, 3] returns [0, 2, 3].

def rm_adj(nums):
  return list(set(nums))

# 2. –í—Ö: –î–≤–∞ —Å–ø–∏—Å–∫–∞ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, –í–æ–∑–≤—Ä: –Ω–æ–≤—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
def sort_two(first, second):
    first += second
    first.sort()
    return first

def test(res, expt):
    result = f"Test ‚úÖ: \'{res}\' equals \'{expt}\'" if res == expt else f"Test üö´: expected \'{expt}\', but \'{res}\' found"
    print(result)

def main():
    test(rm_adj([0, 2, 2, 3, 4]), [0, 2, 3, 4])
    test(sort_two([0, 2, 4], [2, 3 , 1]), [0, 1, 2, 2, 3, 4])

if __name__ == '__main__':
  main()
